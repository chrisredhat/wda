"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WDA_BASE_URL = exports.BOOTSTRAP_PATH = exports.WDA_BUNDLE_ID = exports.WebDriverAgent = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url2 = _interopRequireDefault(require("url"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _noSessionProxy = require("./no-session-proxy");

var _utils = require("./utils");

var _utils2 = require("../utils");

var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));

var _iproxy = _interopRequireDefault(require("./iproxy"));

var _teen_process = require("teen_process");

var _asyncLock = _interopRequireDefault(require("async-lock"));

const BOOTSTRAP_PATH = _path.default.resolve(__dirname, '..', '..', '..', 'WebDriverAgent');

exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;
const WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;
const WDA_LAUNCH_TIMEOUT = 60 * 1000;
const WDA_AGENT_PORT = 8100;
const WDA_BASE_URL = 'http://localhost';
exports.WDA_BASE_URL = WDA_BASE_URL;
const SHARED_RESOURCES_GUARD = new _asyncLock.default();

class WebDriverAgent {
  constructor(xcodeVersion, args = {}) {
    this.xcodeVersion = xcodeVersion;
    this.args = _lodash.default.clone(args);
    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.platformName = args.platformName;
    this.iosSdkVersion = args.iosSdkVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;
    this.setWDAPaths(args.bootstrapPath, args.agentPath);
    this.wdaLocalPort = args.wdaLocalPort;
    this.wdaBaseUrl = args.wdaBaseUrl || WDA_BASE_URL;
    this.prebuildWDA = args.prebuildWDA;
    this.webDriverAgentUrl = args.webDriverAgentUrl;
    this.started = false;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;
    this.useCarthageSsl = _lodash.default.isBoolean(args.useCarthageSsl) && args.useCarthageSsl;
    this.useXctestrunFile = args.useXctestrunFile;
    this.xcodebuild = new _xcodebuild.default(this.xcodeVersion, this.device, {
      platformVersion: this.platformVersion,
      platformName: this.platformName,
      iosSdkVersion: this.iosSdkVersion,
      agentPath: this.agentPath,
      bootstrapPath: this.bootstrapPath,
      realDevice: this.realDevice,
      showXcodeLog: args.showXcodeLog,
      xcodeConfigFile: args.xcodeConfigFile,
      xcodeOrgId: args.xcodeOrgId,
      xcodeSigningId: args.xcodeSigningId,
      keychainPath: args.keychainPath,
      keychainPassword: args.keychainPassword,
      useSimpleBuildTest: args.useSimpleBuildTest,
      usePrebuiltWDA: args.usePrebuiltWDA,
      updatedWDABundleId: args.updatedWDABundleId,
      launchTimeout: args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT,
      wdaRemotePort: this.realDevice ? WDA_AGENT_PORT : this.wdaLocalPort || WDA_AGENT_PORT,
      useXctestrunFile: this.useXctestrunFile,
      derivedDataPath: args.derivedDataPath,
      mjpegServerPort: args.mjpegServerPort
    });
  }

  setWDAPaths(bootstrapPath, agentPath) {
    this.bootstrapPath = bootstrapPath || BOOTSTRAP_PATH;

    _logger.default.info(`Using WDA path: '${this.bootstrapPath}'`);

    this.agentPath = agentPath || _path.default.resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');

    _logger.default.info(`Using WDA agent: '${this.agentPath}'`);
  }

  async cleanupObsoleteProcesses() {
    const pids = await (0, _utils2.getPIDsListeningOnPort)(this.url.port, cmdLine => (cmdLine.includes('/WebDriverAgentRunner') || cmdLine.includes('/iproxy')) && !cmdLine.toLowerCase().includes(this.device.udid.toLowerCase()));

    if (!pids.length) {
      _logger.default.debug(`No obsolete cached processes from previous WDA sessions ` + `listening on port ${this.url.port} have been found`);

      return;
    }

    _logger.default.info(`Detected ${pids.length} obsolete cached process${pids.length === 1 ? '' : 'es'} ` + `from previous WDA sessions. Cleaning up...`);

    try {
      await (0, _teen_process.exec)('kill', pids);
    } catch (e) {
      _logger.default.warn(`Failed to kill obsolete cached process${pids.length === 1 ? '' : 'es'} '${pids}'. ` + `Original error: ${e.message}`);
    }
  }

  async isRunning() {
    return !!(await this.getStatus());
  }

  async getStatus() {
    const noSessionProxy = new _noSessionProxy.NoSessionProxy({
      server: this.url.hostname,
      port: this.url.port,
      base: '',
      timeout: 3000
    });

    try {
      return await noSessionProxy.command('/status', 'GET');
    } catch (err) {
      _logger.default.debug(`WDA is not listening at '${this.url.href}'`);

      return null;
    }
  }

  async uninstall() {
    _logger.default.debug(`Removing WDA application from device`);

    try {
      await this.device.removeApp(WDA_BUNDLE_ID);
    } catch (e) {
      _logger.default.warn(`WebDriverAgent uninstall failed. Perhaps, it is already uninstalled? Original error: ${JSON.stringify(e)}`);
    }
  }

  async launch(sessionId) {
    if (this.webDriverAgentUrl) {
      _logger.default.info(`Using provided WebdriverAgent at '${this.webDriverAgentUrl}'`);

      this.url = this.webDriverAgentUrl;
      this.setupProxies(sessionId);
      return await this.getStatus();
    }

    _logger.default.info('Launching WebDriverAgent on the device');

    this.setupProxies(sessionId);

    if (!this.useXctestrunFile && !(await _appiumSupport.fs.exists(this.agentPath))) {
      throw new Error(`Trying to use WebDriverAgent project at '${this.agentPath}' but the ` + 'file does not exist');
    }

    if (!this.useXctestrunFile) {
      const synchronizationKey = _path.default.normalize(this.bootstrapPath);

      await SHARED_RESOURCES_GUARD.acquire(synchronizationKey, async () => {
        const didPerformUpgrade = await (0, _utils.checkForDependencies)(this.bootstrapPath, this.useCarthageSsl);

        if (didPerformUpgrade) {
          await this.xcodebuild.cleanProject();
        }
      });
    }

    await (0, _utils2.resetXCTestProcesses)(this.device.udid, !this.realDevice, {
      wdaLocalPort: this.url.port
    });

    if (this.realDevice) {
      if ((0, _utils2.isLocalHost)(this.wdaBaseUrl)) {
        this.iproxy = new _iproxy.default(this.device.udid, this.url.port, WDA_AGENT_PORT);
        await this.iproxy.start();
      } else {
        _logger.default.info(`Skip starting iproxy since Appium will communicate with WDA via '${this.wdaBaseUrl}'`);
      }
    }

    await this.xcodebuild.init(this.noSessionProxy);

    if (this.prebuildWDA) {
      await this.xcodebuild.prebuild();
    }

    return await this.xcodebuild.start();
  }

  async isSourceFresh() {
    for (const subPath of [_utils.CARTHAGE_ROOT, 'Resources', `Resources${_path.default.sep}WebDriverAgent.bundle`]) {
      if (!(await _appiumSupport.fs.exists(_path.default.resolve(this.bootstrapPath, subPath)))) {
        return true;
      }
    }

    return false;
  }

  setupProxies(sessionId) {
    const proxyOpts = {
      server: this.url.hostname,
      port: this.url.port,
      base: '',
      timeout: this.wdaConnectionTimeout
    };
    this.jwproxy = new _appiumBaseDriver.JWProxy(proxyOpts);
    this.jwproxy.sessionId = sessionId;
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
    this.noSessionProxyReqRes = this.noSessionProxy.proxyReqRes.bind(this.noSessionProxy);
  }

  async quit() {
    _logger.default.info('Shutting down sub-processes');

    if (this.iproxy) {
      await this.iproxy.quit();
    }

    await this.xcodebuild.quit();
    await this.xcodebuild.reset();

    if (this.jwproxy) {
      this.jwproxy.sessionId = null;
    }

    this.started = false;

    if (!this.args.webDriverAgentUrl) {
      this.webDriverAgentUrl = null;
    }
  }

  get url() {
    if (!this._url) {
      const port = this.wdaLocalPort || WDA_AGENT_PORT;

      const {
        protocol,
        hostname
      } = _url2.default.parse(this.wdaBaseUrl || WDA_BASE_URL);

      this._url = _url2.default.parse(`${protocol}//${hostname}:${port}`);
    }

    return this._url;
  }

  set url(_url) {
    this._url = _url2.default.parse(_url);
  }

  get fullyStarted() {
    return this.started;
  }

  set fullyStarted(started = false) {
    this.started = started;

    if (this.iproxy) {
      this.iproxy.expectIProxyErrors = !started;
    }
  }

  async retrieveDerivedDataPath() {
    return await this.xcodebuild.retrieveDerivedDataPath();
  }

  async setupCaching(updatedWDABundleId) {
    const status = await this.getStatus();

    if (!status || !status.build) {
      _logger.default.debug('WDA is currently not running. There is nothing to cache');

      return;
    }

    const {
      productBundleIdentifier,
      upgradedAt
    } = status.build;

    if (_appiumSupport.util.hasValue(productBundleIdentifier) && _appiumSupport.util.hasValue(updatedWDABundleId) && updatedWDABundleId !== productBundleIdentifier) {
      _logger.default.info(`Will uninstall running WDA since it has different bundle id. The actual value is '${productBundleIdentifier}'.`);

      return await this.uninstall();
    }

    if (_appiumSupport.util.hasValue(productBundleIdentifier) && !_appiumSupport.util.hasValue(updatedWDABundleId) && _utils.WDA_RUNNER_BUNDLE_ID !== productBundleIdentifier) {
      _logger.default.info(`Will uninstall running WDA since its bundle id is not equal to the default value ${_utils.WDA_RUNNER_BUNDLE_ID}`);

      return await this.uninstall();
    }

    const actualUpgradeTimestamp = await (0, _utils.getWDAUpgradeTimestamp)(this.bootstrapPath);

    _logger.default.debug(`Upgrade timestamp of the currently bundled WDA: ${actualUpgradeTimestamp}`);

    _logger.default.debug(`Upgrade timestamp of the WDA on the device: ${upgradedAt}`);

    if (actualUpgradeTimestamp && upgradedAt && _lodash.default.toLower(`${actualUpgradeTimestamp}`) !== _lodash.default.toLower(`${upgradedAt}`)) {
      _logger.default.info('Will uninstall running WDA since it has different version in comparison to the one ' + `which is bundled with appium-xcuitest-driver module (${actualUpgradeTimestamp} != ${upgradedAt})`);

      return await this.uninstall();
    }

    const message = _appiumSupport.util.hasValue(productBundleIdentifier) ? `Will reuse previously cached WDA instance at '${this.url.href}' with '${productBundleIdentifier}'` : `Will reuse previously cached WDA instance at '${this.url.href}'`;

    _logger.default.info(`${message}. Set the wdaLocalPort capability to a value different from ${this.url.port} if this is an undesired behavior.`);

    this.webDriverAgentUrl = this.url.href;
  }

  async quitAndUninstall() {
    await this.quit();
    await this.uninstall();
  }

}

exports.WebDriverAgent = WebDriverAgent;
var _default = WebDriverAgent;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
