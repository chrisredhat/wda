"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _teen_process = require("teen_process");

let extensions = {},
    commands = {};
exports.commands = commands;
const CONFIG_EXTENSION = 'mobileconfig';

async function extractCommonName(certBuffer) {
  const tempCert = await _appiumSupport.tempDir.open({
    prefix: 'cert',
    suffix: '.cer'
  });

  try {
    await _appiumSupport.fs.writeFile(tempCert.path, certBuffer);
    const {
      stdout
    } = await (0, _teen_process.exec)('openssl', ['x509', '-noout', '-subject', '-in', tempCert.path]);
    const cnMatch = /\/CN=([^\/]+)/.exec(stdout);

    if (cnMatch) {
      return cnMatch[1].trim();
    }

    throw new Error(`There is no common name value in '${stdout}' output`);
  } catch (err) {
    throw new Error(`Cannot parse common name value from the certificate. Is it valid and base64-encoded? ` + `Original error: ${err.message}`);
  } finally {
    await _appiumSupport.fs.rimraf(tempCert.path);
  }
}

function toMobileConfig(certBuffer, commonName) {
  const getUUID = () => _uuidJs.default.create().hex.toUpperCase();

  const contentUuid = getUUID();
  return {
    PayloadContent: [{
      PayloadCertificateFileName: `${commonName}.cer`,
      PayloadContent: certBuffer,
      PayloadDescription: 'Adds a CA root certificate',
      PayloadDisplayName: commonName,
      PayloadIdentifier: `com.apple.security.root.${contentUuid}`,
      PayloadType: 'com.apple.security.root',
      PayloadUUID: contentUuid,
      PayloadVersion: 1
    }],
    PayloadDisplayName: commonName,
    PayloadIdentifier: `${_os.default.hostname().split('.')[0]}.${getUUID()}`,
    PayloadRemovalDisallowed: false,
    PayloadType: 'Configuration',
    PayloadUUID: getUUID(),
    PayloadVersion: 1
  };
}

async function clickElement(driver, locator, options = {}) {
  let element = null;
  const {
    timeout = 5000,
    skipIfInvisible = false
  } = options;
  const lookupDelay = 500;

  try {
    element = await (0, _asyncbox.retryInterval)(timeout < lookupDelay ? 1 : timeout / lookupDelay, lookupDelay, () => driver.findNativeElementOrElements(locator.type, locator.value, false));
  } catch (err) {
    if (skipIfInvisible) {
      return false;
    }

    throw new Error(`Cannot find ${JSON.stringify(locator)} within ${timeout}ms timeout`);
  }

  await driver.nativeClick(element);
  return true;
}

async function installCertificateInPreferences(driver) {
  await clickElement(driver, {
    type: 'accessibility id',
    value: 'Allow'
  }, {
    timeout: 15000
  });
  await _bluebird.default.delay(2000);

  if (!(await clickElement(driver, {
    type: 'accessibility id',
    value: 'Install'
  }, {
    skipIfInvisible: true
  }))) {
    return false;
  }

  await _bluebird.default.delay(1500);
  await clickElement(driver, {
    type: 'accessibility id',
    value: 'Install'
  });
  await clickElement(driver, {
    type: '-ios class chain',
    value: '**/XCUIElementTypeSheet/**/XCUIElementTypeButton[`label == \'Install\'`]'
  });
  await clickElement(driver, {
    type: 'accessibility id',
    value: 'Done'
  });
  return true;
}

async function trustCertificateInPreferences(driver, name) {
  await clickElement(driver, {
    type: 'accessibility id',
    value: 'Return to Settings'
  });
  await clickElement(driver, {
    type: 'accessibility id',
    value: 'General'
  });
  await clickElement(driver, {
    type: 'accessibility id',
    value: 'About'
  });
  const switchLocator = {
    type: '-ios class chain',
    value: `**/XCUIElementTypeCell[\`label == '${name}'\`]/**/XCUIElementTypeSwitch`
  };
  await (0, _asyncbox.retry)(5, async () => {
    await driver.mobileSwipe({
      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),
      direction: 'up'
    });
    await clickElement(driver, {
      type: 'accessibility id',
      value: 'Certificate Trust Settings'
    }, {
      timeout: 500
    });
    await driver.findNativeElementOrElements(switchLocator.type, switchLocator.value, false);
  });

  if (await clickElement(driver, {
    type: switchLocator.type,
    value: `${switchLocator.value}[\`value == '0'\`]`
  }, {
    timeout: 1000,
    skipIfInvisible: true
  })) {
    await driver.postAcceptAlert();
  }
}

commands.mobileInstallCertificate = async function mobileInstallCertificate(opts = {}) {
  const {
    content,
    commonName
  } = opts;

  if (_lodash.default.isEmpty(content)) {
    throw new Error('Certificate content should not be empty');
  }

  if (!(await _appiumSupport.fs.exists(_appiumBaseDriver.STATIC_DIR))) {
    throw new Error(`The static content root '${_appiumBaseDriver.STATIC_DIR}' ` + `does not exist or is not accessible`);
  }

  const configName = `${(Math.random() * 0x100000000 + 1).toString(36)}.${CONFIG_EXTENSION}`;

  const configPath = _path.default.resolve(_appiumBaseDriver.STATIC_DIR, configName);

  const certBuffer = Buffer.from(content, 'base64');
  const cn = commonName || (await extractCommonName(certBuffer));
  const mobileConfig = toMobileConfig(certBuffer, cn);

  try {
    await _appiumSupport.plist.updatePlistFile(configPath, mobileConfig, false, false);
  } catch (err) {
    throw new Error(`Cannot store the generated config as '${configPath}'. ` + `Original error: ${err.message}`);
  }

  try {
    const {
      address,
      port
    } = this.server.address();
    const certUrl = `http://${address ? address : _os.default.hostname()}:${port ? port : 4723}/${configName}`;

    try {
      if (this.isRealDevice()) {
        try {
          await this.proxyCommand('/url', 'POST', {
            url: certUrl
          });
        } catch (err) {
          if (this.isWebContext()) {
            await _appiumIosDriver.iosCommands.general.setUrl.call(this, certUrl);
          } else {
            throw err;
          }
        }
      } else {
        await (0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, certUrl);
      }

      if (await installCertificateInPreferences(this)) {
        await trustCertificateInPreferences(this, cn);
      } else {
        _logger.default.info(`It looks like the '${cn}' certificate has been already added to the CA root`);
      }
    } finally {
      try {
        await this.activateApp(this.opts.bundleId);
      } catch (e) {
        _logger.default.warn(`Cannot restore the application '${this.opts.bundleId}'. Original error: ${e.message}`);
      }
    }

    return (await _appiumSupport.fs.readFile(configPath)).toString('base64');
  } finally {
    await _appiumSupport.fs.rimraf(configPath);
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
